# Copyright 2020 Maxime Sorin <maxime.sorin@clever-cloud.com>
# Distributed under the terms of the GNU General Public License v2

myexparam bootstrap
myexparam runtime
myexparam llvm_slot

exparam -v BOOTSTRAP bootstrap
exparam -v RUNTIME runtime
exparam -v LLVM_SLOT llvm_slot

SUMMARY=".NET Core is a cross-platform version of .NET for building websites, services, and console apps."
HOMEPAGE="https://dotnet.microsoft.com/"

LICENCES="MIT"

# This repository contains a set of scripts for building the .NET Core Runtime and SDK from source.
require github [ user="dotnet" project="source-build" tag="v${PV}-SDK" force_git_clone=true ]
require alternatives providers flag-o-matic

export_exlib_phases pkg_setup src_unpack src_prepare src_configure src_compile src_install

# Dotnet SDK binaries, necessary to bootstrap source-build.
DOWNLOADS="https://dotnetcli.azureedge.net/dotnet/Sdk/${BOOTSTRAP}/${PN}-${BOOTSTRAP}-linux-x64.tar.gz -> ${PNV}-bootstrap.tar.gz"

MYOPTIONS=""
DEPENDENCIES="
    build:
        app-admin/eclectic-llvm
        sys-devel/cmake
    build+run:
        app-crypt/krb5
        app-misc/ca-certificates[>=20210119][ca-trust]
        dev-lang/clang:${LLVM_SLOT}
        dev-lang/llvm:${LLVM_SLOT}
        dev-libs/icu:=
        dev-util/lttng-ust
        net-misc/curl
        sys-apps/numactl
        sys-devel/gettext
        sys-devel/lld:${LLVM_SLOT}
        sys-devel/lldb
        sys-libs/llvm-libunwind
        sys-libs/zlib
        !dev-dotnet/dotnet-sdk:0 [[
            description = [ slot move ]
            resolution = uninstall-blocked-before
        ]]
"

dotnet-sdk_pkg_setup() {
    exdirectory --allow /opt
    export CC="$(exhost --tool-prefix)clang"
    export CXX="$(exhost --tool-prefix)clang++"
}

dotnet-sdk_src_unpack() {
    scm_src_unpack

    # The sdk binaries must be placed in a ".dotnet" folder at the root of the project
    local dotnet="${WORK}/.dotnet"
    edo mkdir ${dotnet}
    edo tar xf ${FETCHEDDIR}/${PNV}-bootstrap.tar.gz -C ${dotnet}
    export PATH="${WORK}/.dotnet:${PATH}"
}

DEFAULT_SRC_PREPARE_PATCHES=(
    "${FILES}/${SLOT}/0001-BOOTSTRAP-add-exherbo-rid.patch"
    "${FILES}/${SLOT}/0002-BOOTSTRAP-add-exherbo-rid.patch"
)

if ever at_least 5; then
    # https://github.com/dotnet/source-build/issues/1911
    DEFAULT_SRC_PREPARE_PATCHES+=( "${FILES}/${SLOT}/0003-SOURCE-BUILD-add-rid-suffix.patch" )
fi

dotnet-sdk_src_prepare() {
    default

    edo cp -r "${FILES}"/${SLOT}/*/ "${WORK}"/patches/
}

dotnet-sdk_src_configure() {
    append-ldflags "-fuse-ld=lld"
}

dotnet-sdk_src_compile() {
    providers_set 'assembler llvm' 'cc clang' 'c++ clang' 'compiler-tools llvm' 'ld lld'
    providers_set "clang ${LLVM_SLOT}" "lld ${LLVM_SLOT}" "llvm ${LLVM_SLOT}"

    esandbox disable_net

    export SkipDownloadingReferencePackages=true
    export SkipDownloadingPreviouslySourceBuiltPackages=true
    export UseRazorBuildServer=false

    edo bash build.sh

    esandbox enable_net
}

dotnet-sdk_src_install() {
    local rid="exherbo-x64"

    dodir /opt/${PN}-${SLOT}
    edo tar xf ${WORK}/artifacts/x64/Release/${PNV}-${rid}.tar.gz -C "${IMAGE}"/opt/${PN}-${SLOT}

    local alternatives=(
        "/usr/$(exhost --target)/bin/dotnet" "/opt/${PN}-${SLOT}/dotnet"
        "/usr/$(exhost --target)/lib/libhostfxr.so" "/opt/${PN}-${SLOT}/host/fxr/${RUNTIME}/libhostfxr.so"
        "/usr/$(exhost --target)/lib/libnethost.so" "/opt/${PN}-${SLOT}/packs/Microsoft.NETCore.App.Host.${rid}/${RUNTIME}/runtimes/${rid}/native/libnethost.so"
    )

    for libpath in ${IMAGE}/opt/${PN}-${SLOT}/shared/Microsoft.NETCore.App/${RUNTIME}/{*.a,*.so} ; do
        lib=${libpath##*/}
        alternatives+=( "/usr/$(exhost --target)/lib/${lib}" "/opt/${PN}-${SLOT}/shared/Microsoft.NETCore.App/${RUNTIME}/${lib}" )
    done

    alternatives_for dotnet ${PN}-${SLOT} ${SLOT} "${alternatives[@]}"
}

