# Copyright 2020 Maxime Sorin <maxime.sorin@clever-cloud.com>
# Distributed under the terms of the GNU General Public License v2

myexparam dotnet_project
myexparam dotnet_tag
myexparam dotnet_tarball
myexparam dotnet_runtime
myexparam llvm_slot

exparam -v DOTNET_PROJECT dotnet_project
exparam -v DOTNET_TAG dotnet_tag
exparam -v DOTNET_TARBALL dotnet_tarball
exparam -v DOTNET_RUNTIME dotnet_runtime
exparam -v LLVM_SLOT llvm_slot

SCM_CHECKOUT_TO="${FETCHEDDIR}/${PNV}"

require github [ user="dotnet" project="${DOTNET_PROJECT}" tag="${DOTNET_TAG}" force_git_clone=true ] alternatives providers flag-o-matic

export_exlib_phases pkg_setup src_prepare src_configure src_compile src_install

SUMMARY=".NET Core is a cross-platform version of .NET for building websites, services, and console apps."
HOMEPAGE="https://dotnet.microsoft.com/"

LICENCES="MIT"
MYOPTIONS=""

DEPENDENCIES="
    build:
        app-admin/eclectic-llvm
        sys-devel/cmake
    build+run:
        app-crypt/krb5
        app-misc/ca-certificates[>=20210119][ca-trust]
        dev-lang/clang:${LLVM_SLOT}
        dev-lang/llvm:${LLVM_SLOT}
        dev-libs/icu:=
        dev-libs/openssl:=
        dev-util/lttng-ust[>=2.13.6]
        net-misc/curl
        sys-apps/numactl
        sys-devel/gettext
        sys-devel/lld:${LLVM_SLOT}
        sys-devel/lldb
        sys-libs/zlib
        !dev-dotnet/dotnet-sdk:0 [[
            description = [ slot move ]
            resolution = uninstall-blocked-before
        ]]
"

# src_compile fetches from internet which breaks with syd-3, because this
# phase is run under a network namespace. Ideally fetch should be moved
# to src_unpack which runs outside net-ns.
# TODO(alip): Drop sandbox once paludis#20 is fixed.
RESTRICT=sandbox

dotnet-sdk_pkg_setup() {
    exdirectory --allow /opt
    export CC="$(exhost --tool-prefix)clang"
    export CXX="$(exhost --tool-prefix)clang++"
}

dotnet-sdk_src_prepare() {
    default

    if ! ever at_least 8; then
        edo cp -r "${FILES}"/${SLOT}/* "${WORK}"/src/SourceBuild/tarball/patches/runtime/
    fi
}

dotnet-sdk_src_configure() {
    append-ldflags "-fuse-ld=lld"
}

dotnet-sdk_src_compile() {
    providers_set 'assembler llvm' 'cc clang' 'c++ clang' 'compiler-tools llvm' 'ld lld'
    providers_set "clang ${LLVM_SLOT}" "lld ${LLVM_SLOT}" "llvm ${LLVM_SLOT}"

    esandbox disable_net

    export SkipDownloadingReferencePackages=true
    export SkipDownloadingPreviouslySourceBuiltPackages=true
    export UseRazorBuildServer=false

    # opt-out of collecting and sharing telemetry with Microsoft
    export DOTNET_CLI_TELEMETRY_OPTOUT=true

    # error : Unable to locate repository with working directory that contains directory '/var/cache/paludis/distfiles/scm/dotnet-sdk'
    edo git remote set-url origin "${SCM_REPOSITORY}"

    if ! ever at_least 8; then
        edo bash build.sh /p:ArcadeBuildTarball=true /p:TarballDir=${WORKBASE}/dotnet-sources
        pushd ${WORKBASE}/dotnet-sources
    fi

    edo bash prep.sh

    esandbox enable_net

    esandbox allow_net --bind "unix:${TEMP%/}/dotnet-*"
    esandbox allow_net --bind 'unix:/tmp/*'
    esandbox allow_net --connect 'unix:/tmp/*'

    edo bash build.sh

    esandbox disallow_net --bind 'unix:/tmp/*'
    esandbox disallow_net --connect 'unix:/tmp/*'
    esandbox disallow_net --bind "unix:${TEMP%/}/dotnet-*"
    
}

dotnet-sdk_src_install() {
    local rid="exherbo-x64"

    insinto /etc/${PN}-${SLOT}
    hereins install_location <<EOF
/opt/${PN}-${SLOT}
EOF

    dodir /opt/${PN}-${SLOT}
    edo tar xf ${DOTNET_TARBALL} -C "${IMAGE}"/opt/${PN}-${SLOT}

    local alternatives=(
        "/etc/dotnet" "/etc/${PN}-${SLOT}"
        "/usr/$(exhost --target)/bin/dotnet" "/opt/${PN}-${SLOT}/dotnet"
        "/usr/$(exhost --target)/lib/libhostfxr.so" "/opt/${PN}-${SLOT}/host/fxr/${DOTNET_RUNTIME}/libhostfxr.so"
        "/usr/$(exhost --target)/lib/libnethost.so" "/opt/${PN}-${SLOT}/packs/Microsoft.NETCore.App.Host.${rid}/${DOTNET_RUNTIME}/runtimes/${rid}/native/libnethost.so"
        "/usr/$(exhost --target)/lib/libnethost.a"  "/opt/${PN}-${SLOT}/packs/Microsoft.NETCore.App.Host.${rid}/${DOTNET_RUNTIME}/runtimes/${rid}/native/libnethost.a"
    )

    for libpath in "${IMAGE}"/opt/${PN}-${SLOT}/shared/Microsoft.NETCore.App/${DOTNET_RUNTIME}/*.so ; do
        lib=${libpath##*/}
        alternatives+=( "/usr/$(exhost --target)/lib/${lib}" "/opt/${PN}-${SLOT}/shared/Microsoft.NETCore.App/${DOTNET_RUNTIME}/${lib}" )
    done

    alternatives_for dotnet ${PN}-${SLOT} ${SLOT} "${alternatives[@]}"
}

