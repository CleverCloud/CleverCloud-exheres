# Copyright 2020 Maxime Sorin <maxime.sorin@clever-cloud.com>
# Distributed under the terms of the GNU General Public License v2

myexparam dotnet_project
myexparam dotnet_tag
myexparam dotnet_tarball
myexparam runtime
myexparam llvm_slot

exparam -v DOTNET_PROJECT dotnet_project
exparam -v DOTNET_TAG dotnet_tag
exparam -v DOTNET_TARBALL dotnet_tarball
exparam -v RUNTIME runtime
exparam -v LLVM_SLOT llvm_slot

require github [ user="dotnet" project="${DOTNET_PROJECT}" tag="${DOTNET_TAG}" force_git_clone=true ] alternatives providers flag-o-matic

export_exlib_phases pkg_setup src_prepare src_configure src_compile src_install

SUMMARY=".NET Core is a cross-platform version of .NET for building websites, services, and console apps."
HOMEPAGE="https://dotnet.microsoft.com/"
LICENCES="MIT"

MYOPTIONS=""
DEPENDENCIES="
    build:
        app-admin/eclectic-llvm
        sys-devel/cmake
    build+run:
        app-crypt/krb5
        app-misc/ca-certificates[>=20210119][ca-trust]
        dev-lang/clang:${LLVM_SLOT}
        dev-lang/llvm:${LLVM_SLOT}
        dev-libs/icu:=
        dev-util/lttng-ust$(if ever at_least 6; then echo '[>=2.13.6]'; else echo '[<2.13]'; fi)
        net-misc/curl
        sys-apps/numactl
        sys-devel/gettext
        sys-devel/lld:${LLVM_SLOT}
        sys-devel/lldb
        sys-libs/llvm-libunwind
        sys-libs/zlib
        !dev-dotnet/dotnet-sdk:0 [[
            description = [ slot move ]
            resolution = uninstall-blocked-before
        ]]
"

dotnet-sdk_pkg_setup() {
    exdirectory --allow /opt
    export CC="$(exhost --tool-prefix)clang"
    export CXX="$(exhost --tool-prefix)clang++"
}

dotnet-sdk_src_prepare() {
    default

    edo cp -r "${FILES}"/${SLOT}/* ${WORK}/src/SourceBuild/tarball/patches/runtime/
}

dotnet-sdk_src_configure() {
    append-ldflags "-fuse-ld=lld"
}

dotnet-sdk_src_compile() {
    providers_set 'assembler llvm' 'cc clang' 'c++ clang' 'compiler-tools llvm' 'ld lld'
    providers_set "clang ${LLVM_SLOT}" "lld ${LLVM_SLOT}" "llvm ${LLVM_SLOT}"

    esandbox disable_net

    export SkipDownloadingReferencePackages=true
    export SkipDownloadingPreviouslySourceBuiltPackages=true
    export UseRazorBuildServer=false

    # error : Unable to locate repository with working directory that contains directory '/var/cache/paludis/distfiles/scm/dotnet-sdk'
    edo git remote set-url origin https://github.com/dotnet/installer.git

    # Create a .NET source tarball
    edo bash build.sh /p:ArcadeBuildTarball=true /p:TarballDir=${WORKBASE}/dotnet-sources

    # Prep the source to build on your distro
    pushd ${WORKBASE}/dotnet-sources
    edo bash prep.sh

    # Build the .NET SDK
    edo bash build.sh
    
    esandbox enable_net
}

dotnet-sdk_src_install() {
    local rid="exherbo-x64"

    dodir /opt/${PN}-${SLOT}
    edo tar xf ${DOTNET_TARBALL} -C "${IMAGE}"/opt/${PN}-${SLOT}

    local alternatives=(
        "/usr/$(exhost --target)/bin/dotnet" "/opt/${PN}-${SLOT}/dotnet"
        "/usr/$(exhost --target)/lib/libhostfxr.so" "/opt/${PN}-${SLOT}/host/fxr/${RUNTIME}/libhostfxr.so"
        "/usr/$(exhost --target)/lib/libnethost.so" "/opt/${PN}-${SLOT}/packs/Microsoft.NETCore.App.Host.${rid}/${RUNTIME}/runtimes/${rid}/native/libnethost.so"
    )

    for libpath in ${IMAGE}/opt/${PN}-${SLOT}/shared/Microsoft.NETCore.App/${RUNTIME}/{*.a,*.so} ; do
        lib=${libpath##*/}
        alternatives+=( "/usr/$(exhost --target)/lib/${lib}" "/opt/${PN}-${SLOT}/shared/Microsoft.NETCore.App/${RUNTIME}/${lib}" )
    done

    alternatives_for dotnet ${PN}-${SLOT} ${SLOT} "${alternatives[@]}"
}

