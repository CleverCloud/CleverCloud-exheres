# Copyright 2008, 2009, 2010 Ingmar Vanhassel <ingmar@exherbo.org>
# Copyright 2011-2016 Timo Gurr <tgurr@exherbo.org>
# Copyright 2011-2016 Marc-Antoine Perennou <keruspe@exherbo.org>
# Distributed under the terms of the GNU General Public License v2

require alternatives cmake [ api=2 ] systemd-service

export_exlib_phases pkg_pretend src_prepare src_test src_install pkg_postinst

MYSQL_MAJOR_VERSION=$(ever range 1-2)

SLOT="$(ever range 1-2)"

MY_PV=${PV/_/-}
MY_PNV=${PN,,}-${MY_PV}

# In order to provide a stable code base, MySQL depends on a specific version of Boost.
# Currently only Boost.Geometry headers are used and boost is just required at build time.
if ever at_least 8; then
    BOOST_PV="1.77.0"
else
    BOOST_PV="1.59.0"
fi

SUMMARY="A relational database management system (RDBMS)"
HOMEPAGE="https://www.percona.com/"
DOWNLOADS="
    https://downloads.percona.com/downloads/${PN}-${MYSQL_MAJOR_VERSION}/${PN}-${MY_PV}/source/tarball/${MY_PNV}.tar.gz
    mirror://sourceforge/boost/boost_${BOOST_PV//./_}.tar.bz2
"

LICENCES="GPL-2" # with-exceptions
MYOPTIONS="
    debug
    embedded-server [[ description = [ The embedded MySQL server library, a full-featured MySQL server that can be run inside a client application ] ]]
    memcached [[ description = [ Enable using memcached for InnoDb tables (don't know it? Don't enable it.) ] ]]
    systemd
    ( providers: libressl openssl ) [[ number-selected = exactly-one ]]
"

if ! ever at_least 8; then
    MYOPTIONS+="
        tcpd
    "
fi

# tcpd option can't compile because of https://jira.percona.com/browse/PS-5155
# Upstream mysql fixed it according to https://bugs.mysql.com/bug.php?id=92983
# but it's not yet released
# Disable the option for now
# tcpd
# DEPENDENCIES build+run:
# tcpd? ( sys-apps/tcp-wrappers )

DEPENDENCIES="
    build:
        virtual/pkg-config
        systemd? ( sys-apps/systemd )
    build+run:
        group/mysql
        user/mysql
        app-admin/eclectic[>=2.0.18] [[ note = [ Split ld-*.path, @TARGET@ substitution ] ]]
        app-arch/lz4
        dev-libs/libaio
        dev-libs/libedit
        providers:libressl? ( dev-libs/libressl:= )
        providers:openssl? ( dev-libs/openssl:= )
        !dev-db/mariadb [[
            description = [ MariaDB is a drop-in replacement for MySQL with same binary names ]
            resolution = manual
        ]]
        !dev-db/mysql [[
            description = [ Percona-Server is a drop-in replacement for MySQL with same binary names ]
            resolution = manual
        ]]
        !dev-db/Percona-Server:0 [[
            description = [ Slotify dev-db/Percona-Server ]
            resolution = uninstall-blocked-before
        ]]
    recommendation:
        dev-db/percona-toolkit [[ description = [ The percona toolkit to manage Percona-Server ] ]]
        memcached? ( net/memcached [[ description = [ The option provides the bundled memcached but you might want to use a stand-alone memcached as well ] ]] )
"

if ever at_least 8; then
    DEPENDENCIES+="
        build+run:
            app-crypt/krb5
            dev-libs/libfido2[>=1.4.0]
            dev-libs/protobuf:3.24
            dev-libs/re2:=
            net-directory/openldap
            net-libs/cyrus-sasl
            net-libs/libtirpc
            net-libs/rpcsvc-proto
            net-misc/curl
            sys-libs/zlib[>=1.2.13]
    "
    # Bundled:
    #   dev-libs/rapidjson[>=1.1.0]
else
    DEPENDENCIES+="
        build+run:
            sys-libs/zlib[>=1.2.3]
            tcpd? ( sys-apps/tcp-wrappers )
    "
fi

if ! ever at_least 8; then
    DEFAULT_SRC_PREPARE_PATCHES=(
        "${FILES}/${SLOT}-recent-gcc-fixes.patch"
    )
fi

CMAKE_SOURCE="${WORKBASE}/${MY_PNV}"

Percona-Server_pkg_pretend() {
    # Sanity check when upgrading to a different x.y version of mysql
    if [[ -z ${MYSQL_MOVE_TO_SLOTS} ]] && has_version --root "${CATEGORY}/${PN}:0"; then
        ewarn "To migrate to the slotted versions of Percona-Server, you have to dump/reload your database."
        ewarn "When you've done this, please set 'MYSQL_MOVE_TO_SLOTS=YesPlease', to continue the upgrade."
        ewarn "For more information visit:"
        die "Dump your databases before doing a major version upgrade of MySQL."
    fi

    if [[ -f "${ROOT}"/etc/tmpfiles.d/${PN}.conf ]] ; then
        ewarn "The configuration file /etc/tmpfiles.d/${PN}.conf has been moved to"
        ewarn "/usr/$(exhost --target)/lib/tmpfiles.d/${PN}.conf and can be safely removed after upgrade"
        ewarn "if you did not make any changes to it."
    fi
}

Percona-Server_src_prepare() {
    cmake_src_prepare

    if ever at_least 8; then
        edo sed -e /FIND_PROGRAM/s/pkg-config/$(exhost --tool-prefix)pkg-config/ -i cmake/pkg-config.cmake

        # Failed tests
        edo sed -e "/mysys_pathfuncs/d" -i unittest/gunit/CMakeLists.txt
        # External request to example.org, not allowed by the sandbox.
        edo sed -e "/test_routing.cc/d" -i router/tests/component/CMakeLists.txt
    else
        edo sed -i -e 's:"gcc-ar":'$(exhost --tool-prefix)gcc-ar: "${CMAKE_SOURCE}"/storage/tokudb/PerconaFT/CMakeLists.txt
        edo sed -i -e 's:"gcc-ranlib":'$(exhost --tool-prefix)gcc-ranlib: "${CMAKE_SOURCE}"/storage/tokudb/PerconaFT/CMakeLists.txt
        edo sed -i -e '/^install/s/bin/${INSTALL_BINDIR}/' "${CMAKE_SOURCE}"/storage/tokudb/PerconaFT/tools/CMakeLists.txt
        edo sed -i -e '/^install/s/include/${INSTALL_INCLUDEDIR}/' "${CMAKE_SOURCE}"/plugin/tokudb-backup-plugin/Percona-TokuBackup/backup/CMakeLists.txt
        edo sed -i -e 's/-Werror//' "${CMAKE_SOURCE}"/storage/tokudb/PerconaFT/cmake_modules/TokuSetupCompiler.cmake
    fi
}

CMAKE_SRC_CONFIGURE_PARAMS=(
    --hates=CMAKE_BUILD_TYPE
    -DBUILD_CONFIG:STRING=mysql_release
    # The default layout STANDALONE breaks all the scripts.
    -DINSTALL_LAYOUT:STRING="RPM"
    -DCMAKE_INSTALL_PREFIX:PATH=/usr
    -DCOMPILATION_COMMENT:STRING="Exherbo"
    -DDEFAULT_CHARSET:STRING=utf8
    -DDEFAULT_COLLATION:STRING=utf8_general_ci
    -DFEATURE_SET:STRING=community
    -DINSTALL_BINDIR:PATH=$(exhost --target)/libexec/${PN}-${SLOT}
    -DINSTALL_DOCDIR:PATH=share/doc/${PNVR}-${SLOT}
    -DINSTALL_DOCREADMEDIR:PATH=share/doc/${PNVR}-${SLOT}
    -DINSTALL_INCLUDEDIR:PATH=$(exhost --target)/include/${PN}-${SLOT}
    -DINSTALL_INFODIR:PATH=share/${PN}-${SLOT}/info
    -DINSTALL_LIBDIR:PATH=$(exhost --target)/lib/${PN}-${SLOT}
    -DINSTALL_MANDIR:PATH=share/man/${PN}-${SLOT}
    -DINSTALL_MYSQLSHAREDIR:PATH=share/${PN}-${SLOT}
    # Empty value to not install the mysql-test directory
    -DINSTALL_MYSQLTESTDIR:STRING=
    -DINSTALL_PLUGINDIR:PATH=$(exhost --target)/lib/${PN}-${SLOT}/plugin
    -DINSTALL_SBINDIR:PATH=$(exhost --target)/libexec/${PN}-${SLOT}
    -DINSTALL_SCRIPTDIR:PATH=$(exhost --target)/libexec/${PN}-${SLOT}
    -DINSTALL_SHAREDIR:PATH=share
    -DINSTALL_SUPPORTFILESDIR:PATH=share/${PN}-${SLOT}
    -DMYSQL_DATADIR:PATH=/var/lib/${PN}/${SLOT}
    -DMYSQL_UNIX_ADDR:PATH=/run/${PN}-${SLOT}/mysqld.sock
    -DSYSCONFDIR:PATH=/etc/${PN}-${SLOT}
    -DSYSTEMD_PID_DIR:PATH=/run/${PN}-${SLOT}
    -DSYSTEMD_SERVICES_DIR:PATH=${SYSTEMDSYSTEMUNITDIR}
    -DSYSTEMD_TMPFILES_DIR:PATH=/usr/$(exhost --target)/lib/tmpfiles.d
    -DENABLED_PROFILING:BOOL=TRUE
    -DWITH_ASAN:BOOL=FALSE
    -DWITH_EXTRA_CHARSETS:STRING=all
    # Default ENGINES for MySQL 5.6 community build (currently == xlarge) minus embedded
    -DWITH_ARCHIVE_STORAGE_ENGINE:BOOL=TRUE
    -DWITH_BLACKHOLE_STORAGE_ENGINE:BOOL=TRUE
    -DWITH_FEDERATED_STORAGE_ENGINE:BOOL=TRUE
    -DWITH_INNOBASE_STORAGE_ENGINE:BOOL=TRUE
    -DWITH_PARTITION_STORAGE_ENGINE:BOOL=TRUE
    -DWITH_UNIT_TESTS:BOOL=TRUE
    -DWITH_VALGRIND:BOOL=FALSE
    -DWITH_ZLIB:STRING=system
    -DCMAKE_DISABLE_FIND_PACKAGE_Git:BOOL=TRUE
    -DENABLE_DTRACE:BOOL=FALSE
    -DENABLE_GCOV:BOOL=FALSE
    -DENABLE_GPROF:BOOL=FALSE
    -DENABLED_LOCAL_INFILE:BOOL=TRUE
    -DWITH_EDITLINE:STRING=system
    # Compilation fails because of undefined symbols when using system libevent
    -DWITH_LIBEVENT:STRING=bundled
    -DWITH_NUMA:BOOL=FALSE
    -DWITH_SSL:STRING=system
    -DBOOST_INCLUDE_DIR:PATH="${WORKBASE}"/boost_${BOOST_PV//./_}
    -DLOCAL_BOOST_DIR:PATH="${WORKBASE}"/boost_${BOOST_PV//./_}
    -DWITH_BOOST:PATH="${WORKBASE}"/boost_${BOOST_PV//./_}
    -DWITH_CLIENT_PROTOCOL_TRACING:BOOL=FALSE
    -DWITH_LZ4:STRING=system
    -DWITH_MSAN:BOOL=FALSE
    -DWITH_PROTOBUF=$(ever at_least 8.0 && echo system || echo bundled)
    -DWITH_RAPID:BOOL=FALSE
    -DWITH_TEST_TRACE_PLUGIN:BOOL=FALSE
    -DWITH_UBSAN:BOOL=FALSE
    -DWITH_COREDUMPER:BOOL=FALSE
    -DUSE_CTAGS:BOOL=FALSE
    -DUSE_ETAGS:BOOL=FALSE
    -DUSE_GTAGS:BOOL=FALSE
    -DUSE_CSCOPE:BOOL=FALSE
)

CMAKE_SRC_CONFIGURE_OPTIONS_CUSTOM=(
    'debug -DCMAKE_BUILD_TYPE:STRING=Debug -DCMAKE_BUILD_TYPE:STRING=Release'
    # Unfortunately, the InnoDb/memcached interface needs libevent 1.4.x
    # as bundled with MySQL or trying to use memcached WILL make MySQL
    # segfault immediately.
    # (Keeping this comment even though the bundled lib is used anyway in
    # order to remember *why* I changed it.)
    'memcached -DWITH_LIBEVENT:STRING=bundled'
)

CMAKE_SRC_CONFIGURE_OPTION_WITHS=(
    'debug DEBUG'
    'embedded-server EMBEDDED_SERVER'
    'memcached INNODB_MEMCACHED'
    'systemd SYSTEMD'
)

if ever at_least 8; then
    CMAKE_SRC_CONFIGURE_PARAMS+=(
        -DROUTER_INSTALL_LIBDIR:PATH=$(exhost --target)/lib/${PN}-${SLOT}
        -DROUTER_INSTALL_PLUGINDIR:PATH=$(exhost --target)/lib/${PN}-${SLOT}/plugin
        -DUSE_LD_LLD:BOOL=FALSE
        -DWITH_FIDO=system
        -DWITH_ICU=system
        -DWITH_RAPIDJSON:STRING=bundled
        -DWITH_RE2:STRING=system
    )
else
    CMAKE_SRC_CONFIGURE_OPTION_WITHS+=(
        'tcpd LIBWRAP'
    )
fi

Percona-Server_src_test() {
    esandbox allow_net --bind "inet:0.0.0.0@0-65535"
    esandbox allow_net --connect "inet:0.0.0.0@0-65535"

    esandbox allow_net --connect "inet:127.0.0.1@0-65535"

    esandbox allow_net --bind 'unix:/tmp/router-*/*'
    esandbox allow_net --connect 'unix:/tmp/router-*/*'

    esandbox allow_net --bind 'unix:/this/path/does/not/exist/socket'
    esandbox allow_net --connect 'unix:/this/path/does/not/exist/socket'

    esandbox allow_net --bind 'unix:${WORK}/router/tests/component/*'
    esandbox allow_net --connect 'unix:${WORK}/router/tests/component/*'

    cmake_src_test

    esandbox disallow_net --bind "inet:0.0.0.0@0-65535"
    esandbox disallow_net --connect "inet:0.0.0.0@0-65535"

    esandbox disallow_net --connect "inet:127.0.0.1@0-65535"

    esandbox disallow_net --bind 'unix:/tmp/router-*/*'
    esandbox disallow_net --connect 'unix:/tmp/router-*/*'

    esandbox disallow_net --bind 'unix:/this/path/does/not/exist/socket'
    esandbox disallow_net --connect 'unix:/this/path/does/not/exist/socket'

    esandbox disallow_net --bind 'unix:${WORK}/router/tests/component/*'
    esandbox disallow_net --connect 'unix:${WORK}/router/tests/component/*'
}

Percona-Server_src_install() {
    local alternatives=()
    cmake_src_install

    # TODO(sardemff7): check if in the future, this is fixed upstream somehow
    edo sed -i \
        -e 's:-lzlib:-lz:g' \
        "${IMAGE}"/usr/$(exhost --target)/libexec/${PN}-${SLOT}/mysql_config \
        "${IMAGE}"/usr/$(exhost --target)/lib/${PN}-${SLOT}/pkgconfig/perconaserverclient.pc

    if ever at_least 8; then
        # Remove files pages we explicitly do not want to package
        # https://github.com/percona/percona-server/blob/8.0/build-ps/percona-server.spec#L639
        # TODO: Maybe find a better way
        edo rm -r "${IMAGE}"/usr/{include,lib}
    fi

    # Remove empty directories
    ! option debug && edo rmdir "${IMAGE}"/usr/$(exhost --target)/lib/${PN}-${SLOT}/plugin/debug

    keepdir /etc/${PN}-${SLOT}

    insinto /etc/${PN}-${SLOT}
    newins "${FILES}"/my-${SLOT}.cnf my.cnf

    hereenvd 46${PN}-${SLOT} <<EOF
LDPATH=/usr/@TARGET@/lib/${PN}-${SLOT}
EOF

    keepdir /var/lib/mysql-files
    edo chown mysql:mysql "${IMAGE}"/var/lib/mysql-files
    edo chmod 0750 "${IMAGE}"/var/lib/mysql-files
    if ! ever at_least 8; then
        edo rm "${IMAGE}"/usr/{README.md,COPYING.*,PATENTS}
    fi

    for bin in mysql mysqldump mysqladmin mysql_config; do
        alternatives+=(
            /usr/$(exhost --target)/bin/${bin}  /usr/$(exhost --target)/libexec/${PN}-${SLOT}/${bin}
        )
    done

    alternatives+=(
        /usr/$(exhost --target)/lib/pkgconfig/mysqlclient.pc /usr/$(exhost --target)/lib/${PN}-${SLOT}/pkgconfig/perconaserverclient.pc
        /usr/$(exhost --target)/lib/pkgconfig/perconaserverclient.pc /usr/$(exhost --target)/lib/${PN}-${SLOT}/pkgconfig/perconaserverclient.pc
    )

    edo cd "${IMAGE}"

    for manpage in usr/share/man/man1/*.1; do
        manfile=${manpage##*/}
        alternatives+=( "/${manpage}" "${manfile/%.1/-${SLOT}.1}" )
    done

    alternatives+=(
        "/usr/share/man/man8/mysqld.8" "${PN}-${SLOT}.8"
        "/usr/share/aclocal/mysql.m4" "${PN}-${SLOT}.m4"
    )

    edo mv "${IMAGE}/${SYSTEMDSYSTEMUNITDIR}/"{mysqld,${PN}-${SLOT//./}}.service
    edo mv "${IMAGE}/${SYSTEMDSYSTEMUNITDIR}/"{mysqld,${PN}-${SLOT//./}}@.service
    edo mv "${IMAGE}"/usr/$(exhost --target)/lib/tmpfiles.d/{mysql,${PN}-${SLOT}}.conf
    edo mv "${IMAGE}"/usr/share/aclocal/{mysql,${PN}-${SLOT}}.m4

    alternatives_for mysql ${PN}-${SLOT} ${SLOT} "${alternatives[@]}"
}

Percona-Server_pkg_postinst() {
    alternatives_pkg_postinst

    if option memcached ; then
        elog "In order to finalise your installation of the memcached plugin, you must install"
        elog "it in MySQL using the following command as an administrative user:"
        elog ""
        elog "mysql> install plugin daemon_memcached soname "libmemcached.so";"
        elog ""
    fi
}

