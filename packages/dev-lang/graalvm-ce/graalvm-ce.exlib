# Copyright 2019 Timo Gurr <tgurr@exherbo.org>
# Copyright 2019 Maxime Sorin <maxime.sorin@clever-cloud.com>
# Distributed under the terms of the GNU General Public License v2
# Based in part upon 'oracle-jdk-bin-1.8.0.144.ebuild' from Gentoo, which is:
# Copyright 1999-2017 Gentoo Foundation

myexparam labsjdk
myexparam jvmci
exparam -v LABSJDK labsjdk
exparam -v JVMCI jvmci

SCM_REPOSITORY="https://github.com/oracle/graal.git"
SCM_TAG="vm-${PV}"

require scm-git java-jdk autotools [ supported_autoconf=[ 2.5 ] supported_automake=[ 1.16 ] ]

SUMMARY="Run Programs Faster Anywhere"
DESCRIPTION="GraalVM is a universal virtual machine for running applications written in JavaScript, Python, Ruby, R, JVM-based languages like Java, Scala, Clojure, Kotlin, and LLVM-based languages such as C and C++"
HOMEPAGE="https://www.graalvm.org/"
LICENCES="GPL-2-with-classpath-exception"
DOWNLOADS="https://github.com/graalvm/labs-openjdk-${SLOT}/releases/download/${JVMCI}/${LABSJDK}-${JVMCI}-linux-amd64.tar.gz"

MYOPTIONS="
    alsa 
    cups
    headless-awt [[ description = [ Don't install the X backend for AWT, needed by some GUIs ] ]]
    jce [[ description = [ Enable the Java Cryptographic Extension Unlimited Strength Jurisdiction Policy ] ]]
"
DEPENDENCIES="
    build:
        dev-java/mx[>=7.45.0]
        dev-lang/python:2.7
        sys-devel/binutils[>=2.33.1]
        sys-devel/gcc:*[>=6.4.0]
        sys-devel/make[>=4.2.1]
    build+run:
        app-misc/ca-certificates[>=20170717-r1][ca-trust]
        dev-java/java-env
    run:
        media-libs/freetype:2
        !headless-awt? (
            x11-libs/libX11
            x11-libs/libXext
            x11-libs/libXi
            x11-libs/libXrender
            x11-libs/libXtst
        )
        alsa? ( sys-sound/alsa-lib )
        cups? ( net-print/cups )
    post:
        virtual/jdk:${SLOT}
        virtual/jre:${SLOT}
"

pkg_setup() {
    exdirectory --allow /opt
}

src_unpack() {
    default
    scm_src_unpack
}

src_prepare(){
    echo 

    edo sed -e /return/s/gcc/${CC}/ -i substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/c/libc/HostedGLibC.java
    edo sed -e "s/objdump/$(exhost --tool-prefix)&/" -i substratevm/mx.substratevm/mx_substratevm.py

    default
}

src_compile(){
    export JAVA_HOME=${WORKBASE}/${LABSJDK%+*}-${JVMCI}
    export MX_ALT_OUTPUT_ROOT=${WORK}/mxbuild
    export DYNAMIC_IMPORTS=/substratevm,/tools,/sulong
    export EXCLUDE_COMPONENTS=llp
    export FORCE_BASH_LAUNCHERS=polyglot

    edo pushd vm
    esandbox disable_net

    edo mx build

    esandbox enable_net
    edo popd
}

src_install(){
    local java_home="/opt/${PNV}"

    dodir "${java_home}"

    edo cd vm/latest_graalvm_home

    # Create files used as storage for system preferences.
    edo mkdir .systemPrefs
    edo touch .systemPrefs/.system.lock
    edo touch .systemPrefs/.systemRootModFile

    # remove the bundled freetype library
    edo rm -vf lib/*/libfreetype.*

    option alsa || edo rm -vf lib/*/libjsoundalsa.*

    option headless-awt && edo rm -vf lib/lib*{[jx]awt,splashscreen}* 

    if option jce ; then
        edo sed \
            -e 's:#crypto.policy=unlimited:crypto.policy=unlimited:g' \
            -i conf/security/java.security
    fi

    # Install the JDK/JRE
    insinto "${java_home}"
    doins -r bin conf include jmods languages lib tools

    # Fix the executables' permissions.
    edo chmod 755 "${IMAGE}/${java_home}"/bin/*
    edo chmod 755 "${IMAGE}/${java_home}"/lib/{jexec,jspawnhelper}

    # Creating the Class Data Sharing archives
    edo "${IMAGE}/${java_home}"/bin/java -server -Xshare:dump

    # Link the Java KeyStore file generated by ca-certificates
    edo rm "${IMAGE}/${java_home}"/lib/security/cacerts
    dosym /etc/pki/ca-trust/extracted/java/cacerts "${java_home}"/lib/security/cacerts

    # The following code for alternatives handling is copied over from java-jdk.exlib
    # which currently doesn't allow jre_home to be under /opt. The code can be removed
    # once the exlib has been updated with support for such.
    local jre_home="${java_home}"

    local jdk_bins=( ) \
          jre_bins=( )

    # Collect the installed binaries from ${java_home}/bin
    for jdk_bin in "${IMAGE}${java_home}"/bin/* ; do
        [[ ! -d "${jdk_bin}" && -x "${jdk_bin}" ]] &&
            jdk_bins+=( "${jdk_bin##*/}" )
    done

    # Collect the installed binaries from ${java_home}/jre/bin
    for jre_bin in "${IMAGE}${java_home}"/jre/bin/* ; do
        [[ ! -d "${jre_bin}" && -x "${jre_bin}" ]] &&
            jre_bins+=( "${jre_bin##*/}" )
    done

    # For ${jdk_bins}, filter out all binaries common to both ${jdk_bins} and
    # ${jre_bins} -- we want the java-jre alternatives module to own those
    for jre_bin in "${jre_bins[@]}" ; do
        for index in "${!jdk_bins[@]}" ; do
            [[ "${jdk_bins[$index]}" == "${jre_bin}" ]] && unset jdk_bins[$index]
        done
    done

    # Create alternatives mappings for the collected binaries and man pages
    local jdk_alternatives_map_bin=( ) \
          jre_alternatives_map_bin=( )

    for jdk_bin in "${jdk_bins[@]}" ; do
        jdk_alternatives_map_bin+=(
            "/usr/$(exhost --target)/bin/${jdk_bin}" "${java_home}/bin/${jdk_bin}"
        )
    done

    for jre_bin in "${jre_bins[@]}" ; do
        jre_alternatives_map_bin+=(
            "/usr/$(exhost --target)/bin/${jre_bin}" "${java_home}/jre/bin/${jre_bin}"
        )
    done

    # Just for clarity, tie everything together: group the above mappings
    # according to the alternatives module they belong to
    local jdk_alternatives=(
        "/usr/$(exhost --target)/lib/jdk" "${java_home}"
        "${jdk_alternatives_map_bin[@]}"
    )

    local jre_alternatives=(
        "/usr/$(exhost --target)/lib/jre" "${java_home}"
        "${jre_alternatives_map_bin[@]}"
    )

    # Finally, pass the groups to their respective alternatives modules
    alternatives_for "java-jdk" "${PN}-${SLOT}" "${SLOT}" "${jdk_alternatives[@]}"
    alternatives_for "java-jre" "${PN}-${SLOT}" "${SLOT}" "${jre_alternatives[@]}"

    pushd "${IMAGE}${java_home}"/bin > /dev/null
    for target_path in ../jre/bin/* ; do
        local binary_name="${target_path##*/}"
        if [[ -f "${binary_name}" && -x "${binary_name}" && ! -L "${binary_name}" ]] ; then
            edo rm -f "${binary_name}"
            dosym "${target_path}" "${java_home}/bin/${binary_name}"
        fi
    done
    popd > /dev/null

    hereenvd 45graal <<EOF
GRAALVM_HOME="${java_home}"
EOF
}
