# Copyright 2019 Timo Gurr <tgurr@exherbo.org>
# Copyright 2019 Maxime Sorin <maxime.sorin@clever-cloud.com>
# Distributed under the terms of the GNU General Public License v2
# Based in part upon 'oracle-jdk-bin-1.8.0.144.ebuild' from Gentoo, which is:
# Copyright 1999-2017 Gentoo Foundation

LICENCES="GPL-2-with-classpath-exception"
PLATFORMS="~amd64"
SLOT="1.8"

SUMMARY="Run Programs Faster Anywhere"
DESCRIPTION="GraalVM is a universal virtual machine for running applications written in JavaScript, Python, Ruby, R, JVM-based languages like Java, Scala, Clojure, Kotlin, and LLVM-based languages such as C and C++"
HOMEPAGE="https://www.graalvm.org/"

SCM_REPOSITORY="https://github.com/oracle/graal.git"
SCM_TAG="vm-${PV}"
require scm-git java-jdk autotools [ supported_autoconf=[ 2.5 ] supported_automake=[ 1.16 ] ]

# Temporary, waiting for jvm support for openjdk 11
JDK="openjdk-8u202"
JVMCI="jvmci-0.58"
JDK_EXTRACT="openjdk1.8.0_202"
DOWNLOADS="https://github.com/graalvm/openjdk8-jvmci-builder/releases/download/${JVMCI}/${JDK}-${JVMCI}-linux-amd64.tar.gz"

MYOPTIONS="
    alsa 
    cups
    headless-awt [[ description = [ Don't install the X backend for AWT, needed by some GUIs ] ]]
    jce [[ description = [ Enable the Java Cryptographic Extension Unlimited Strength Jurisdiction Policy ] ]]
    native [[ description = [ Creates native launchers for the supported languages and for polyglot ] ]]
    polyglot [[ description = [ Run code from guest languages in JVM-based host applications ] ]]
"

DEPENDENCIES="
    build:
        dev-java/mx[>=5.215.4]
        sys-devel/binutils[>=2.29.1]
        sys-devel/gcc[>=4.9.1]
        sys-devel/make[>=3.8.3]
    build+run:
        app-misc/ca-certificates[>=20170717-r1][ca-trust]
        dev-java/java-env
    run:
        media-libs/freetype:2
        !headless-awt? (
            x11-libs/libX11
            x11-libs/libXext
            x11-libs/libXi
            x11-libs/libXrender
            x11-libs/libXtst
        )
        alsa? ( sys-sound/alsa-lib )
        cups? ( net-print/cups )
    post:
        virtual/jdk:${SLOT}
        virtual/jre:${SLOT}
"

src_unpack() {
    default
    scm_src_unpack
}

src_prepare(){
    # Temporary, waiting for jvm support for openjdk 11
    export JAVA_HOME=${WORKBASE}/${JDK_EXTRACT}-${JVMCI}

    # Create env file
    touch vm/mx.vm/build-configuration

    # If the flag is activated, add to the array
    IMPORTS=()
    optionq native && IMPORTS+=("/substratevm")

    # Check mx imports
    if [[ -n "${IMPORTS[*]}" ]]; then
        IMPORTS_WITH_COMMA="$(IFS=","; echo "${IMPORTS[*]}")"
        echo "DYNAMIC_IMPORTS=${IMPORTS_WITH_COMMA}" >> vm/mx.vm/build-configuration
    fi

    # Disable polyglot if the flag is not enabled
    optionq !polyglot && \
        echo "DISABLE_LIBPOLYGLOT=true" >> vm/mx.vm/build-configuration && \
        echo "DISABLE_POLYGLOT=true" >> vm/mx.vm/build-configuration

    # Replace hard coded binary / native image
    edo sed -e /command/s/gcc/${CC}/ -i substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/c/codegen/CCompilerInvoker.java
    edo sed -e /compilerCommand/s/cc/${CC}/ -i substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/image/CCLinkerInvocation.java

    # Change the location of the mxbuild folder
    export MX_ALT_OUTPUT_ROOT=${WORK}/mxbuild
}

src_compile(){
    esandbox disable_net
    edo cd vm && edo mx --env build-configuration build
    esandbox enable_net
}

src_install(){
    local java_home="/usr/$(exhost --target)/lib/${PN}"

    dodir "${java_home}"

    edo cd vm/latest_graalvm_home

    # Create files used as storage for system preferences.
    edo mkdir jre/.systemPrefs
    edo touch jre/.systemPrefs/.system.lock
    edo touch jre/.systemPrefs/.systemRootModFile

    # remove the bundled freetype library
    edo rm -vf jre/lib/*/libfreetype.*

    option alsa || edo rm -vf jre/lib/*/libjsoundalsa.*

    option headless-awt && edo rm -vf {,jre/}lib/*/lib*{[jx]awt,splashscreen}* \
        {,jre/}bin/policytool \
            bin/appletviewer

    if option jce ; then
        edo sed \
            -e 's:#crypto.policy=unlimited:crypto.policy=unlimited:g' \
            -i jre/lib/security/java.security
    fi

    # Install the JDK/JRE
    insinto "${java_home}"
    doins -r bin include lib jre man release

    # Fix the executables' permissions.
    edo chmod 755 "${IMAGE}/${java_home}"/{,jre/}bin/*

    # Creating the Class Data Sharing archives
    edo "${IMAGE}/${java_home}"/bin/java -server -Xshare:dump

    # Link the Java KeyStore file generated by ca-certificates
    edo rm "${IMAGE}/${java_home}"/jre/lib/security/cacerts
    dosym /etc/pki/ca-trust/extracted/java/cacerts "${java_home}"/jre/lib/security/cacerts

    # Set up java-jdk and java-jre alternatives automatically. 
    do_jdk_alternatives

    pushd "${IMAGE}${java_home}"/bin > /dev/null
    for target_path in ../jre/bin/* ; do
        local binary_name="${target_path##*/}"
        if [[ -f "${binary_name}" && -x "${binary_name}" && ! -L "${binary_name}" ]] ;     then
            edo rm -f "${binary_name}"
            dosym "${target_path}" "${java_home}/bin/${binary_name}"
        fi
    done
    popd > /dev/null

    hereenvd 45graal <<EOF
GRAALVM_HOME="${java_home}"
EOF
}
