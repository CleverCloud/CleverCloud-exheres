# Copyright 2024 David Legrand <david.legrand@clever-cloud.com>
# Distributed under the terms of the GNU General Public License v2

export_exlib_phases src_prepare pkg_setup src_compile src_test src_install

SCM_SECONDARY_REPOSITORIES="vc tcc markdown"
SCM_vc_REPOSITORY="https://github.com/vlang/vc"
SCM_tcc_REPOSITORY="https://github.com/vlang/tccbin"
SCM_markdown_REPOSITORY="https://github.com/vlang/markdown"

case "${PLATFORM}" in
  "amd64") SCM_tcc_BRANCH="thirdparty-linux-amd64" ;;
  "armv7") SCM_tcc_BRANCH="thirdparty-linux-arm" ;;
  "armv8") SCM_tcc_BRANCH="thirdparty-linux-aarch64" ;;
esac

require github [ user=vlang tag=${PV} force_git_clone=true ] scm-git 

SUMMARY="Simple, fast, safe, compiled language for developing maintainable software"
HOMEPAGE="https://vlang.io/"
DESCRIPTION="
V is a statically typed compiled programming language designed for building maintainable software.
It's similar to Go and its design has also been influenced by Oberon, Rust, Swift, Kotlin, and Python.
V is a very simple language. Going through this documentation will take you about a weekend, and by the end of it you will have pretty much learned the entire language.
The language promotes writing simple and clear code with minimal abstraction.
Despite being simple, V gives the developer a lot of power. Anything you can do in other languages, you can do in V.
"

UPSTREAM_CHANGELOG="https://github.com/vlang/v/blob/master/CHANGELOG.md [[ lang = en ]]"
UPSTREAM_DOCUMENTATION="
    https://github.com/vlang/v/blob/master/doc/docs.md [[ 
        lang = en 
        description = [ Documentation ] 
    ]]
    https://modules.vlang.io/ [[ lang = en description = [ Standard Library ] ]]
"

LICENCES="MIT"
SLOT="0"
MYOPTIONS="
    is_xorg_env [[ 
        description = [ Set to 'true' if X window system is enabled on your system, it will be tested too ]
    ]]
    platform: amd64 armv8
"

DEFAULT_SRC_COMPILE_PARAMS=(
    local=1
)

DEFAULT_SRC_PREPARE_PATCHES=(
    "${FILES}"/patches-${PV}/0001-tools-prevent-module-updates-during-v-build-tools.patch
    "${FILES}"/patches-${PV}/0002-vtest-self-add-native_test-to-skippable-tests.patch
    "${FILES}"/patches-${PV}/0003-vtest-self-add-vet_test-to-skippable-tests.patch
    "${FILES}"/patches-${PV}/0004-vtest-self-add-network-tests-to-skippable-tests.patch
)

v_src_prepare() {
  default

  # Replace update/recompile tools to disable them
  edo cp -f ${FILES}/vup.v cmd/tools/vup.v
  edo cp -f ${FILES}/vself.v cmd/tools/vself.v

  # Remove native tools needing X11 (fail to build on non graphical/X11 setup)
  if ! option is_xorg_env; then
    edo rm cmd/tools/vshare.v
  fi

  # Get and configure local vc/tcc/cc compilers
  edo mv ../vc .
  edo mv ../tcc thirdparty/

  # Install Markdown vmodule
  edo mkdir -p ~/.vmodules/
  edo mv ../markdown ~/.vmodules/
}

v_pkg_setup() {
  # Configure sanbox compiler
  export VFLAGS="-cc $(exhost --tool-prefix)cc"

  # Skip tests/phases using network or an embeded compiler
  export VTEST_SANDBOXED_PACKAGING=1
}

v_src_compile() {
  default
  edo ./v build-tools
  
  # Tools in a subfolder need to be compiled separately
  local sub_tools=(
    "vpm"
    "vast"
    "vvet"
    "vdoc"
    "vwhere"
    "vcreate"
  )
  
  for s in "${sub_tools[@]}"; do
    edo ./v cmd/tools/${s}/
  done 

  # Create a file to prevent tools to be automaticaly recompiled
  edo touch cmd/tools/.disable_autorecompilation
}

v_src_test() {
  edo ./v test-self
}

v_src_install () {
  insinto "/usr/$(exhost --target)/libexec/vlang/"
  doins "v.mod"

  local paths=(
    "cmd"
    "vlib"
    "thirdparty"
  )

  for p in "${paths[@]}"; do
    doins -r "${p}"
  done 

  emagicdocs
  dodoc -r "doc"
  dodoc -r "examples"

  # Install additional tools built
  local bins=(
    "cmd/tools/vgret"
    "cmd/tools/vtest-all"
    "cmd/tools/parser_speed"
    "cmd/tools/detect_tcc"
    "cmd/tools/vcompress"
    "cmd/tools/regress"
    "cmd/tools/vscan"
    "cmd/tools/vfmt"
    "cmd/tools/changelog_helper"
    "cmd/tools/vbuild-examples"
    "cmd/tools/vrepeat"
    "cmd/tools/vcomplete"
    "cmd/tools/vmissdoc"
    "cmd/tools/translate"
    "cmd/tools/vbuild-vbinaries"
    "cmd/tools/vself"
    "cmd/tools/vtest-parser"
    "cmd/tools/vsetup-freetype"
    "cmd/tools/vbin2v"
    "cmd/tools/vup"
    "cmd/tools/vsymlink"
    "cmd/tools/vdoctor"
    "cmd/tools/scanner_speed"
    "cmd/tools/check_os_api_parity"
    "cmd/tools/vtest-fmt"
    "cmd/tools/fast_job"
    "cmd/tools/test_os_process"
    "cmd/tools/vwatch"
    "cmd/tools/vbuild-tools"
    "cmd/tools/vls"
    "cmd/tools/vwipe-cache"
    "cmd/tools/install_wabt.vsh"
    "cmd/tools/install_binaryen.vsh"
    "cmd/tools/performance_compare"
    "cmd/tools/vrepl"
    "cmd/tools/report_v_module_folders_without_tests"
    "cmd/tools/vbug"
    "cmd/tools/vtracev"
    "cmd/tools/vtest-self"
    "cmd/tools/test_if_v_test_system_works"
    "cmd/tools/vshould-compile-all"
    "cmd/tools/map_fuzz"
    "cmd/tools/vtest-cleancode"
    "cmd/tools/git_pre_commit_hook.vsh"
    "cmd/tools/vcheck-md"
    "cmd/tools/show_ancient_deprecations"
    "cmd/tools/oldv"
    "cmd/tools/vbump"
    "cmd/tools/vshader"
    "cmd/tools/vtest"
    "cmd/tools/vshare"
  )

  exeinto "/usr/$(exhost --target)/libexec/vlang/cmd/tools/"
  for f in "${bins[@]}"; do
    [[ -f "${f}" ]] && doexe ${f}
  done

  local builders=(
    "cmd/tools/builders/native_builder"
    "cmd/tools/builders/interpret_builder"
    "cmd/tools/builders/c_builder"
    "cmd/tools/builders/js_builder"
    "cmd/tools/builders/golang_builder"
    "cmd/tools/builders/wasm_builder"
  )

  exeinto "/usr/$(exhost --target)/libexec/vlang/cmd/tools/builders/"
  for f in "${builders[@]}"; do
    [[ -f "${f}" ]] && doexe ${f}
  done

  local sub_tools=(
    "vpm"
    "vast"
    "vvet"
    "vdoc"
    "vwhere"
    "vcreate"
  )
  
  for s in "${sub_tools[@]}"; do
    exeinto "/usr/$(exhost --target)/libexec/vlang/cmd/tools/${s}/"
    [[ -f "cmd/tools/${s}/${s}" ]] && doexe "cmd/tools/${s}/${s}"
  done 
  
  # Install v and vcc compiler
  exeinto "/usr/$(exhost --target)/libexec/vlang/"
  doexe "v"
  exeinto "/usr/$(exhost --target)/libexec/vlang/thirdparty/tcc/"
  doexe "thirdparty/tcc/tcc.exe"

  # Create the V symlink
  dodir /usr/$(exhost --target)/bin
  dosym ../libexec/vlang/v /usr/$(exhost --target)/bin/v
}
