Upstream: no
Author: Quentin “Sardem FF7” Glidic <sardemff6exherbo.org>
Reason: GCC 10+ build fixes
diff -ur a/icd-main.cpp b/icd-main.cpp
--- a/icd-main.cpp	2023-04-11 14:38:20.806404530 +0200
+++ b/icd-main.cpp	2012-04-07 00:19:27.000000000 +0200
@@ -126,7 +126,7 @@
  * 
  * \throw InotifyException thrown if base table directory cannot be read
  */
-void load_tables(EventDispatcher* pEd) throw (InotifyException)
+void load_tables(EventDispatcher* pEd) noexcept(false)
 {
   // WARNING - this function has not been optimized!!!
   
diff -ur a/inotify-cxx.cpp b/inotify-cxx.cpp
--- a/inotify-cxx.cpp	2023-04-11 14:38:20.806404530 +0200
+++ b/inotify-cxx.cpp	2012-04-07 00:19:27.000000000 +0200
@@ -224,7 +224,7 @@
 }
 
 
-void InotifyWatch::SetMask(uint32_t uMask) throw (InotifyException)
+void InotifyWatch::SetMask(uint32_t uMask) noexcept(false)
 {
   IN_WRITE_BEGIN
   
@@ -241,7 +241,7 @@
   IN_WRITE_END
 }
 
-void InotifyWatch::SetEnabled(bool fEnabled) throw (InotifyException)
+void InotifyWatch::SetEnabled(bool fEnabled) noexcept(false)
 {
   IN_WRITE_BEGIN
   
@@ -294,7 +294,7 @@
 }
 
 
-Inotify::Inotify() throw (InotifyException)
+Inotify::Inotify() noexcept(false)
 {
   IN_LOCK_INIT
   
@@ -325,7 +325,7 @@
   IN_WRITE_END
 }
 
-void Inotify::Add(InotifyWatch* pWatch) throw (InotifyException)
+void Inotify::Add(InotifyWatch* pWatch) noexcept(false)
 {
   IN_WRITE_BEGIN
   
@@ -379,7 +379,7 @@
   IN_WRITE_END
 }
 
-void Inotify::Remove(InotifyWatch* pWatch) throw (InotifyException)
+void Inotify::Remove(InotifyWatch* pWatch) noexcept(false)
 {
   IN_WRITE_BEGIN
   
@@ -428,7 +428,7 @@
   IN_WRITE_END
 }
 
-void Inotify::WaitForEvents(bool fNoIntr) throw (InotifyException)
+void Inotify::WaitForEvents(bool fNoIntr) noexcept(false)
 {
   ssize_t len = 0;
   
@@ -461,7 +461,7 @@
   IN_WRITE_END
 }
   
-bool Inotify::GetEvent(InotifyEvent* pEvt) throw (InotifyException)
+bool Inotify::GetEvent(InotifyEvent* pEvt) noexcept(false)
 {
   if (pEvt == NULL)
     throw InotifyException(IN_EXC_MSG("null pointer to event"), EINVAL, this);
@@ -479,7 +479,7 @@
   return b;
 }
   
-bool Inotify::PeekEvent(InotifyEvent* pEvt) throw (InotifyException)
+bool Inotify::PeekEvent(InotifyEvent* pEvt) noexcept(false)
 {
   if (pEvt == NULL)
     throw InotifyException(IN_EXC_MSG("null pointer to event"), EINVAL, this);
@@ -520,7 +520,7 @@
   return pW;
 }
   
-void Inotify::SetNonBlock(bool fNonBlock) throw (InotifyException)
+void Inotify::SetNonBlock(bool fNonBlock) noexcept(false)
 {
   IN_WRITE_BEGIN
   
@@ -550,7 +550,7 @@
   IN_WRITE_END
 }
 
-void Inotify::SetCloseOnExec(bool fClOnEx) throw (InotifyException)
+void Inotify::SetCloseOnExec(bool fClOnEx) noexcept(false)
 {
   IN_WRITE_BEGIN
   
@@ -580,7 +580,7 @@
   IN_WRITE_END
 }
 
-uint32_t Inotify::GetCapability(InotifyCapability_t cap) throw (InotifyException)
+uint32_t Inotify::GetCapability(InotifyCapability_t cap) noexcept(false)
 {
   FILE* f = fopen(GetCapabilityPath(cap).c_str(), "r");
   if (f == NULL)
@@ -597,7 +597,7 @@
   return (uint32_t) val;
 }
 
-void Inotify::SetCapability(InotifyCapability_t cap, uint32_t val) throw (InotifyException)
+void Inotify::SetCapability(InotifyCapability_t cap, uint32_t val) noexcept(false)
 {
   FILE* f = fopen(GetCapabilityPath(cap).c_str(), "w");
   if (f == NULL)
@@ -611,7 +611,7 @@
   fclose(f);
 }
 
-std::string Inotify::GetCapabilityPath(InotifyCapability_t cap) throw (InotifyException)
+std::string Inotify::GetCapabilityPath(InotifyCapability_t cap) noexcept(false)
 {
   std::string path(PROCFS_INOTIFY_BASE);
   
diff -ur a/inotify-cxx.h b/inotify-cxx.h
--- a/inotify-cxx.h	2023-04-11 14:38:20.806404530 +0200
+++ b/inotify-cxx.h	2012-04-07 00:19:27.000000000 +0200
@@ -447,7 +447,7 @@
    * 
    * \throw InotifyException thrown if changing fails
    */
-  void SetMask(uint32_t uMask) throw (InotifyException);   
+  void SetMask(uint32_t uMask) noexcept(false);
   
   /// Returns the appropriate inotify class instance.
   /**
@@ -470,7 +470,7 @@
    * 
    * \throw InotifyException thrown if enabling/disabling fails
    */
-  void SetEnabled(bool fEnabled) throw (InotifyException);
+  void SetEnabled(bool fEnabled) noexcept(false);
   
   /// Checks whether the watch is enabled.
   /**
@@ -541,7 +541,7 @@
    * 
    * \throw InotifyException thrown if inotify isn't available
    */
-  Inotify() throw (InotifyException);
+  Inotify() noexcept(false);
   
   /// Destructor.
   /**
@@ -558,7 +558,7 @@
    * 
    * \throw InotifyException thrown if adding failed
    */
-  void Add(InotifyWatch* pWatch) throw (InotifyException);
+  void Add(InotifyWatch* pWatch) noexcept(false);
   
   /// Adds a new watch.
   /**
@@ -566,7 +566,7 @@
    * 
    * \throw InotifyException thrown if adding failed
    */
-  inline void Add(InotifyWatch& rWatch) throw (InotifyException)
+  inline void Add(InotifyWatch& rWatch) noexcept(false)
   {
     Add(&rWatch);
   }
@@ -579,7 +579,7 @@
    * 
    * \throw InotifyException thrown if removing failed
    */
-  void Remove(InotifyWatch* pWatch) throw (InotifyException);
+  void Remove(InotifyWatch* pWatch) noexcept(false);
   
   /// Removes a watch.
   /**
@@ -589,7 +589,7 @@
    * 
    * \throw InotifyException thrown if removing failed
    */
-  inline void Remove(InotifyWatch& rWatch) throw (InotifyException)
+  inline void Remove(InotifyWatch& rWatch) noexcept(false)
   {
     Remove(&rWatch);
   }
@@ -640,7 +640,7 @@
    * 
    * \sa SetNonBlock()
    */
-  void WaitForEvents(bool fNoIntr = false) throw (InotifyException);
+  void WaitForEvents(bool fNoIntr = false) noexcept(false);
   
   /// Returns the count of received and queued events.
   /**
@@ -666,7 +666,7 @@
    * 
    * \throw InotifyException thrown if the provided pointer is NULL
    */
-  bool GetEvent(InotifyEvent* pEvt) throw (InotifyException);
+  bool GetEvent(InotifyEvent* pEvt) noexcept(false);
   
   /// Extracts a queued inotify event.
   /**
@@ -676,7 +676,7 @@
    * 
    * \throw InotifyException thrown only in very anomalous cases
    */
-  bool GetEvent(InotifyEvent& rEvt) throw (InotifyException)
+  bool GetEvent(InotifyEvent& rEvt) noexcept(false)
   {
     return GetEvent(&rEvt);
   }
@@ -690,7 +690,7 @@
    * 
    * \throw InotifyException thrown if the provided pointer is NULL
    */
-  bool PeekEvent(InotifyEvent* pEvt) throw (InotifyException);
+  bool PeekEvent(InotifyEvent* pEvt) noexcept(false);
   
   /// Extracts a queued inotify event (without removing).
   /**
@@ -700,7 +700,7 @@
    * 
    * \throw InotifyException thrown only in very anomalous cases
    */
-  bool PeekEvent(InotifyEvent& rEvt) throw (InotifyException)
+  bool PeekEvent(InotifyEvent& rEvt) noexcept(false)
   {
     return PeekEvent(&rEvt);
   }
@@ -755,7 +755,7 @@
    * 
    * \sa GetDescriptor(), SetCloseOnExec()
    */
-  void SetNonBlock(bool fNonBlock) throw (InotifyException);
+  void SetNonBlock(bool fNonBlock) noexcept(false);
   
   /// Enables/disables closing on exec.
   /**
@@ -771,7 +771,7 @@
    * 
    * \sa GetDescriptor(), SetNonBlock()
    */
-  void SetCloseOnExec(bool fClOnEx) throw (InotifyException);
+  void SetCloseOnExec(bool fClOnEx) noexcept(false);
   
   /// Acquires a particular inotify capability/limit.
   /**
@@ -779,7 +779,7 @@
    * \return capability/limit value
    * \throw InotifyException thrown if the given value cannot be acquired
    */
-  static uint32_t GetCapability(InotifyCapability_t cap) throw (InotifyException);
+  static uint32_t GetCapability(InotifyCapability_t cap) noexcept(false);
   
   /// Modifies a particular inotify capability/limit.
   /**
@@ -790,14 +790,14 @@
    *            Beware of setting extensive values - it may seriously
    *            affect system performance and/or stability.
    */
-  static void SetCapability(InotifyCapability_t cap, uint32_t val) throw (InotifyException);
+  static void SetCapability(InotifyCapability_t cap, uint32_t val) noexcept(false);
   
   /// Returns the maximum number of events in the kernel queue.
   /**
    * \return maximum number of events in the kernel queue
    * \throw InotifyException thrown if the given value cannot be acquired
    */
-  inline static uint32_t GetMaxEvents() throw (InotifyException)
+  inline static uint32_t GetMaxEvents() noexcept(false)
   {
     return GetCapability(IN_MAX_EVENTS);
   }
@@ -811,7 +811,7 @@
    *            is set here the more physical memory may be used for the inotify
    *            infrastructure.
    */
-  inline static void SetMaxEvents(uint32_t val) throw (InotifyException)
+  inline static void SetMaxEvents(uint32_t val) noexcept(false)
   {
     SetCapability(IN_MAX_EVENTS, val);
   }
@@ -824,7 +824,7 @@
    * \return maximum number of inotify instances
    * \throw InotifyException thrown if the given value cannot be acquired
    */
-  inline static uint32_t GetMaxInstances() throw (InotifyException)
+  inline static uint32_t GetMaxInstances() noexcept(false)
   {
     return GetCapability(IN_MAX_INSTANCES);
   }
@@ -838,7 +838,7 @@
    *            is set here the more physical memory may be used for the inotify
    *            infrastructure.
    */
-  inline static void SetMaxInstances(uint32_t val) throw (InotifyException)
+  inline static void SetMaxInstances(uint32_t val) noexcept(false)
   {
     SetCapability(IN_MAX_INSTANCES, val);
   }
@@ -851,7 +851,7 @@
    * \return maximum number of inotify watches
    * \throw InotifyException thrown if the given value cannot be acquired
    */
-  inline static uint32_t GetMaxWatches() throw (InotifyException)
+  inline static uint32_t GetMaxWatches() noexcept(false)
   {
     return GetCapability(IN_MAX_WATCHES);
   }
@@ -865,7 +865,7 @@
    *            is set here the more physical memory may be used for the inotify
    *            infrastructure.
    */
-  inline static void SetMaxWatches(uint32_t val) throw (InotifyException)
+  inline static void SetMaxWatches(uint32_t val) noexcept(false)
   {
     SetCapability(IN_MAX_WATCHES, val);
   }
@@ -881,7 +881,7 @@
   
   friend class InotifyWatch;
   
-  static std::string GetCapabilityPath(InotifyCapability_t cap) throw (InotifyException);
+  static std::string GetCapabilityPath(InotifyCapability_t cap) noexcept(false);
 };
 
 
