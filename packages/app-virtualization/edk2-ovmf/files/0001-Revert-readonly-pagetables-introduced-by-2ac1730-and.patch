Upstream: no, in https://github.com/kholia/edk2/
From bea527e7d85bacb4c6f8dc4a00c48284285bc3df Mon Sep 17 00:00:00 2001
From: Nicholas Sherlock <n.sherlock@gmail.com>
Date: Tue, 21 Aug 2018 15:56:54 +0530
Subject: [PATCH 1/2] Revert readonly pagetables introduced by 2ac1730 and
 147fd35

---
 .../Core/DxeIplPeim/Ia32/DxeLoadFunc.c        |  6 ------
 .../Core/DxeIplPeim/X64/VirtualMemory.c       | 11 +---------
 UefiCpuPkg/CpuDxe/CpuPageTable.c              | 21 ++++++++++++-------
 3 files changed, 14 insertions(+), 24 deletions(-)

diff --git a/MdeModulePkg/Core/DxeIplPeim/Ia32/DxeLoadFunc.c b/MdeModulePkg/Core/DxeIplPeim/Ia32/DxeLoadFunc.c
index 0bf99bc77e..5dc40c97aa 100644
--- a/MdeModulePkg/Core/DxeIplPeim/Ia32/DxeLoadFunc.c
+++ b/MdeModulePkg/Core/DxeIplPeim/Ia32/DxeLoadFunc.c
@@ -149,12 +149,6 @@ Create4GPageTablesIa32Pae (
       );
   }
 
-  //
-  // Protect the page table by marking the memory used for page table to be
-  // read-only.
-  //
-  EnablePageTableProtection ((UINTN)PageMap, FALSE);
-
   return (UINTN) PageMap;
 }
 
diff --git a/MdeModulePkg/Core/DxeIplPeim/X64/VirtualMemory.c b/MdeModulePkg/Core/DxeIplPeim/X64/VirtualMemory.c
index cf3c3f94d8..43b08ad9ab 100644
--- a/MdeModulePkg/Core/DxeIplPeim/X64/VirtualMemory.c
+++ b/MdeModulePkg/Core/DxeIplPeim/X64/VirtualMemory.c
@@ -805,16 +805,7 @@ CreateIdentityMappingPageTables (
       );
   }
 
-  //
-  // Protect the page table by marking the memory used for page table to be
-  // read-only.
-  //
-  EnablePageTableProtection ((UINTN)PageMap, TRUE);
-
-  //
-  // Set IA32_EFER.NXE if necessary.
-  //
-  if (IsEnableNonExecNeeded ()) {
+  if (PcdGetBool (PcdSetNxForStack)) {
     EnableExecuteDisableBit ();
   }
 
diff --git a/UefiCpuPkg/CpuDxe/CpuPageTable.c b/UefiCpuPkg/CpuDxe/CpuPageTable.c
index 4bee8c7772..5eb1e511b9 100644
--- a/UefiCpuPkg/CpuDxe/CpuPageTable.c
+++ b/UefiCpuPkg/CpuDxe/CpuPageTable.c
@@ -1045,7 +1045,6 @@ InitializePageTablePool (
   )
 {
   VOID                      *Buffer;
-  BOOLEAN                   IsModified;
 
   //
   // Do not allow re-entrance.
@@ -1055,7 +1054,6 @@ InitializePageTablePool (
   }
 
   mPageTablePoolLock = TRUE;
-  IsModified = FALSE;
 
   //
   // Always reserve at least PAGE_TABLE_POOL_UNIT_PAGES, including one page for
@@ -1101,17 +1099,16 @@ InitializePageTablePool (
     NULL,
     (PHYSICAL_ADDRESS)(UINTN)Buffer,
     EFI_PAGES_TO_SIZE (PoolPages),
-    EFI_MEMORY_RO,
+    0,
     PageActionSet,
     AllocatePageTableMemory,
     NULL,
-    &IsModified
+    NULL
     );
-  ASSERT (IsModified == TRUE);
 
 Done:
   mPageTablePoolLock = FALSE;
-  return IsModified;
+  return TRUE;
 }
 
 /**
@@ -1323,9 +1320,17 @@ InitializePageTableLib (
   if (CurrentPagingContext.ContextData.X64.PageTableBase != 0 &&
       (CurrentPagingContext.ContextData.Ia32.Attributes &
        PAGE_TABLE_LIB_PAGING_CONTEXT_IA32_X64_ATTRIBUTES_PAE) != 0) {
-    DisableReadOnlyPageWriteProtect ();
+
+    BOOLEAN IsWpEnabled;
+
+    IsWpEnabled = IsReadOnlyPageWriteProtected ();
+    if (IsWpEnabled) {
+      DisableReadOnlyPageWriteProtect ();
+    }
     InitializePageTablePool (1);
-    EnableReadOnlyPageWriteProtect ();
+    if (IsWpEnabled) {
+      EnableReadOnlyPageWriteProtect ();
+    }
   }
 
   if (HEAP_GUARD_NONSTOP_MODE || NULL_DETECTION_NONSTOP_MODE) {
-- 
2.19.1

