Upstream: yes, https://github.com/elastic/apm-agent-java/pull/1352/
From 412054e2b58dfd2ee6999f7f056c23f68e11c289 Mon Sep 17 00:00:00 2001
From: Sylvain Juge <sylvain.juge@elastic.co>
Date: Fri, 21 Aug 2020 18:17:54 +0200
Subject: [PATCH 1/5] give higher priority to JAVA_HOME over 'java.home'

---
 .../co/elastic/apm/attach/JvmDiscoverer.java  | 46 +++++++++++--------
 .../co/elastic/apm/attach/RemoteAttacher.java |  3 +-
 .../elastic/apm/attach/JvmDiscovererTest.java |  6 +--
 3 files changed, 33 insertions(+), 22 deletions(-)

diff --git a/apm-agent-attach/src/main/java/co/elastic/apm/attach/JvmDiscoverer.java b/apm-agent-attach/src/main/java/co/elastic/apm/attach/JvmDiscoverer.java
index 3dc2fdfc8..93d1f91dd 100644
--- a/apm-agent-attach/src/main/java/co/elastic/apm/attach/JvmDiscoverer.java
+++ b/apm-agent-attach/src/main/java/co/elastic/apm/attach/JvmDiscoverer.java
@@ -100,7 +100,7 @@ private static String getJpsOutput() throws IOException, InterruptedException {
             for (String s : jpsOutput.split("\n")) {
                 JvmInfo parse = JvmInfo.parse(s);
                 // ignore jps command that we just started as it's already terminated and not relevant for attachment
-                if(!parse.packageOrPathOrJvmProperties.contains(".Jps")){
+                if (!parse.packageOrPathOrJvmProperties.contains(".Jps")) {
                     set.add(parse);
                 }
             }
@@ -120,24 +120,34 @@ private static Process runJps() throws IOException {
             return new ProcessBuilder(getJpsPath(System.getProperties()).toString(), "-lv").start();
         }
 
-        // package protected for testing
-        static Path getJpsPath(Properties systemProperties) {
-            String javaHome = systemProperties.getProperty("java.home");
-            String os = systemProperties.getProperty("os.name");
-            Path binaryPath;
-            if (os != null && os.startsWith("Windows")) {
-                binaryPath = Paths.get("jps.exe");
-            } else {
-                binaryPath = Paths.get("jps");
-            }
-            if (javaHome != null) {
-                binaryPath = Paths.get(javaHome)
-                    .toAbsolutePath()
-                    .resolve("bin")
-                    .resolve(binaryPath);
-            }
-            return binaryPath;
+    }
+
+    // package protected for testing
+    static Path getJpsPath(Properties systemProperties) {
+        String javaHome = systemProperties.getProperty("java.home");
+
+        // give priority to `JAVA_HOME` environment variable when set
+        // as the `${JAVA_HOME}/bin/java` binary might be symlinked to `${JAVA_HOME}/jre/bin/java` which makes the
+        // `java.home` set to a JRE folder, where `jps` binary can't be found
+        String javaHomeEnv = System.getenv("JAVA_HOME");
+        if (null != javaHomeEnv && !javaHomeEnv.equals(javaHome)) {
+            javaHome = javaHomeEnv;
+        }
+
+        String os = systemProperties.getProperty("os.name");
+        Path binaryPath;
+        if (os != null && os.startsWith("Windows")) {
+            binaryPath = Paths.get("jps.exe");
+        } else {
+            binaryPath = Paths.get("jps");
+        }
+        if (javaHome != null) {
+            binaryPath = Paths.get(javaHome)
+                .toAbsolutePath()
+                .resolve("bin")
+                .resolve(binaryPath);
         }
+        return binaryPath;
     }
 
     enum Unavailable implements JvmDiscoverer {
diff --git a/apm-agent-attach/src/main/java/co/elastic/apm/attach/RemoteAttacher.java b/apm-agent-attach/src/main/java/co/elastic/apm/attach/RemoteAttacher.java
index 263067c1b..d3327a4c9 100644
--- a/apm-agent-attach/src/main/java/co/elastic/apm/attach/RemoteAttacher.java
+++ b/apm-agent-attach/src/main/java/co/elastic/apm/attach/RemoteAttacher.java
@@ -60,7 +60,8 @@ public static void main(String[] args) throws Exception {
             arguments = Arguments.parse(args);
             if (!arguments.getIncludes().isEmpty() || !arguments.getExcludes().isEmpty()) {
                 if (!JvmDiscoverer.Jps.INSTANCE.isAvailable()) {
-                    throw new IllegalStateException("Matching JVMs with --include or --exclude requires jps to be installed");
+                    String jpsPath = JvmDiscoverer.getJpsPath(System.getProperties()).toString();
+                    throw new IllegalStateException("Matching JVMs with --include or --exclude requires jps, unable to execute " + jpsPath);
                 }
             }
         } catch (IllegalArgumentException e) {
diff --git a/apm-agent-attach/src/test/java/co/elastic/apm/attach/JvmDiscovererTest.java b/apm-agent-attach/src/test/java/co/elastic/apm/attach/JvmDiscovererTest.java
index 962cb5c96..33eb70e4f 100644
--- a/apm-agent-attach/src/test/java/co/elastic/apm/attach/JvmDiscovererTest.java
+++ b/apm-agent-attach/src/test/java/co/elastic/apm/attach/JvmDiscovererTest.java
@@ -61,7 +61,7 @@ void jpsShouldIgnoreJps() throws Exception {
     @Test
     void getJpsPathNoJavaHome() {
         Properties sysProperties = new Properties();
-        Path path = JvmDiscoverer.Jps.getJpsPath(sysProperties);
+        Path path = JvmDiscoverer.getJpsPath(sysProperties);
         assertThat(path).asString()
             .describedAs("should use binary in path as fallback")
             .isEqualTo("jps");
@@ -71,14 +71,14 @@ void getJpsPathNoJavaHome() {
     void getJpsPathWindows() {
         Properties sysProperties = new Properties();
         sysProperties.put("os.name", "Windows ME"); // the best one ever !
-        Path path = JvmDiscoverer.Jps.getJpsPath(sysProperties);
+        Path path = JvmDiscoverer.getJpsPath(sysProperties);
         assertThat(path).asString().isEqualTo("jps.exe");
         // note: we can't really test both windows+java.home set as it relies on absolute path resolution
     }
 
     @Test
     void getJpsPathCurrentJvm() {
-        Path path = JvmDiscoverer.Jps.getJpsPath(System.getProperties());
+        Path path = JvmDiscoverer.getJpsPath(System.getProperties());
         assertThat(Files.isExecutable(path)).isTrue();
     }
 

From 564e3cf45a2c162b58a0887ab4733eabb6834ef2 Mon Sep 17 00:00:00 2001
From: Sylvain Juge <sylvain.juge@elastic.co>
Date: Fri, 21 Aug 2020 18:54:21 +0200
Subject: [PATCH 2/5] java7 is your friend

---
 .../co/elastic/apm/attach/JvmDiscoverer.java  | 61 +++++++++++--------
 .../co/elastic/apm/attach/RemoteAttacher.java |  2 +-
 .../elastic/apm/attach/JvmDiscovererTest.java |  6 +-
 3 files changed, 41 insertions(+), 28 deletions(-)

diff --git a/apm-agent-attach/src/main/java/co/elastic/apm/attach/JvmDiscoverer.java b/apm-agent-attach/src/main/java/co/elastic/apm/attach/JvmDiscoverer.java
index 93d1f91dd..cf7feb267 100644
--- a/apm-agent-attach/src/main/java/co/elastic/apm/attach/JvmDiscoverer.java
+++ b/apm-agent-attach/src/main/java/co/elastic/apm/attach/JvmDiscoverer.java
@@ -31,6 +31,7 @@
 import java.io.FileFilter;
 import java.io.FilenameFilter;
 import java.io.IOException;
+import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.util.ArrayList;
@@ -117,37 +118,49 @@ public boolean isAvailable() {
         }
 
         private static Process runJps() throws IOException {
-            return new ProcessBuilder(getJpsPath(System.getProperties()).toString(), "-lv").start();
+            return new ProcessBuilder(JpsFinder.getJpsPath(System.getProperties()).toString(), "-lv").start();
         }
 
     }
 
-    // package protected for testing
-    static Path getJpsPath(Properties systemProperties) {
-        String javaHome = systemProperties.getProperty("java.home");
+    class JpsFinder {
+        // package protected for testing
+        static Path getJpsPath(Properties systemProperties) {
+            String javaHome = systemProperties.getProperty("java.home");
 
-        // give priority to `JAVA_HOME` environment variable when set
-        // as the `${JAVA_HOME}/bin/java` binary might be symlinked to `${JAVA_HOME}/jre/bin/java` which makes the
-        // `java.home` set to a JRE folder, where `jps` binary can't be found
-        String javaHomeEnv = System.getenv("JAVA_HOME");
-        if (null != javaHomeEnv && !javaHomeEnv.equals(javaHome)) {
-            javaHome = javaHomeEnv;
-        }
+            // give priority to `JAVA_HOME` environment variable when set as 'java.home' might point to a JRE
+            String javaHomeEnv = System.getenv("JAVA_HOME");
+            if (null != javaHomeEnv && !javaHomeEnv.equals(javaHome)) {
+                javaHome = javaHomeEnv;
+            }
 
-        String os = systemProperties.getProperty("os.name");
-        Path binaryPath;
-        if (os != null && os.startsWith("Windows")) {
-            binaryPath = Paths.get("jps.exe");
-        } else {
-            binaryPath = Paths.get("jps");
-        }
-        if (javaHome != null) {
-            binaryPath = Paths.get(javaHome)
-                .toAbsolutePath()
-                .resolve("bin")
-                .resolve(binaryPath);
+            String os = systemProperties.getProperty("os.name");
+            Path binaryName;
+            if (os != null && os.startsWith("Windows")) {
+                binaryName = Paths.get("jps.exe");
+            } else {
+                binaryName = Paths.get("jps");
+            }
+            Path binaryPath = binaryName;
+            if (javaHome != null) {
+                binaryPath = Paths.get(javaHome)
+                    .toAbsolutePath()
+                    .resolve("bin")
+                    .resolve(binaryName);
+
+                if (!Files.isExecutable(binaryPath)) {
+                    // in case 'java.home' or JAVA_HOME are set to a JRE
+                    // we try to use the one in the folder up, which is usually where the JDK is
+                    binaryPath = Paths.get(javaHome)
+                        .toAbsolutePath()
+                        .resolve("..")
+                        .resolve("bin")
+                        .resolve(binaryName);
+                }
+
+            }
+            return binaryPath;
         }
-        return binaryPath;
     }
 
     enum Unavailable implements JvmDiscoverer {
diff --git a/apm-agent-attach/src/main/java/co/elastic/apm/attach/RemoteAttacher.java b/apm-agent-attach/src/main/java/co/elastic/apm/attach/RemoteAttacher.java
index d3327a4c9..1a4baff5e 100644
--- a/apm-agent-attach/src/main/java/co/elastic/apm/attach/RemoteAttacher.java
+++ b/apm-agent-attach/src/main/java/co/elastic/apm/attach/RemoteAttacher.java
@@ -60,7 +60,7 @@ public static void main(String[] args) throws Exception {
             arguments = Arguments.parse(args);
             if (!arguments.getIncludes().isEmpty() || !arguments.getExcludes().isEmpty()) {
                 if (!JvmDiscoverer.Jps.INSTANCE.isAvailable()) {
-                    String jpsPath = JvmDiscoverer.getJpsPath(System.getProperties()).toString();
+                    String jpsPath = JvmDiscoverer.JpsFinder.getJpsPath(System.getProperties()).toString();
                     throw new IllegalStateException("Matching JVMs with --include or --exclude requires jps, unable to execute " + jpsPath);
                 }
             }
diff --git a/apm-agent-attach/src/test/java/co/elastic/apm/attach/JvmDiscovererTest.java b/apm-agent-attach/src/test/java/co/elastic/apm/attach/JvmDiscovererTest.java
index 33eb70e4f..bdddcbcf5 100644
--- a/apm-agent-attach/src/test/java/co/elastic/apm/attach/JvmDiscovererTest.java
+++ b/apm-agent-attach/src/test/java/co/elastic/apm/attach/JvmDiscovererTest.java
@@ -61,7 +61,7 @@ void jpsShouldIgnoreJps() throws Exception {
     @Test
     void getJpsPathNoJavaHome() {
         Properties sysProperties = new Properties();
-        Path path = JvmDiscoverer.getJpsPath(sysProperties);
+        Path path = JvmDiscoverer.JpsFinder.getJpsPath(sysProperties);
         assertThat(path).asString()
             .describedAs("should use binary in path as fallback")
             .isEqualTo("jps");
@@ -71,14 +71,14 @@ void getJpsPathNoJavaHome() {
     void getJpsPathWindows() {
         Properties sysProperties = new Properties();
         sysProperties.put("os.name", "Windows ME"); // the best one ever !
-        Path path = JvmDiscoverer.getJpsPath(sysProperties);
+        Path path = JvmDiscoverer.JpsFinder.getJpsPath(sysProperties);
         assertThat(path).asString().isEqualTo("jps.exe");
         // note: we can't really test both windows+java.home set as it relies on absolute path resolution
     }
 
     @Test
     void getJpsPathCurrentJvm() {
-        Path path = JvmDiscoverer.getJpsPath(System.getProperties());
+        Path path = JvmDiscoverer.JpsFinder.getJpsPath(System.getProperties());
         assertThat(Files.isExecutable(path)).isTrue();
     }
 

From 30bb7a43c68937ddd75444440c82cf4476ff235b Mon Sep 17 00:00:00 2001
From: Sylvain Juge <sylvain.juge@elastic.co>
Date: Fri, 21 Aug 2020 19:01:06 +0200
Subject: [PATCH 3/5] a bit more stylish

---
 .../co/elastic/apm/attach/JvmDiscoverer.java  | 39 ++++++++++---------
 1 file changed, 21 insertions(+), 18 deletions(-)

diff --git a/apm-agent-attach/src/main/java/co/elastic/apm/attach/JvmDiscoverer.java b/apm-agent-attach/src/main/java/co/elastic/apm/attach/JvmDiscoverer.java
index cf7feb267..39141bcbb 100644
--- a/apm-agent-attach/src/main/java/co/elastic/apm/attach/JvmDiscoverer.java
+++ b/apm-agent-attach/src/main/java/co/elastic/apm/attach/JvmDiscoverer.java
@@ -126,14 +126,6 @@ private static Process runJps() throws IOException {
     class JpsFinder {
         // package protected for testing
         static Path getJpsPath(Properties systemProperties) {
-            String javaHome = systemProperties.getProperty("java.home");
-
-            // give priority to `JAVA_HOME` environment variable when set as 'java.home' might point to a JRE
-            String javaHomeEnv = System.getenv("JAVA_HOME");
-            if (null != javaHomeEnv && !javaHomeEnv.equals(javaHome)) {
-                javaHome = javaHomeEnv;
-            }
-
             String os = systemProperties.getProperty("os.name");
             Path binaryName;
             if (os != null && os.startsWith("Windows")) {
@@ -141,14 +133,19 @@ static Path getJpsPath(Properties systemProperties) {
             } else {
                 binaryName = Paths.get("jps");
             }
-            Path binaryPath = binaryName;
-            if (javaHome != null) {
-                binaryPath = Paths.get(javaHome)
-                    .toAbsolutePath()
-                    .resolve("bin")
-                    .resolve(binaryName);
-
-                if (!Files.isExecutable(binaryPath)) {
+
+            for (String javaHome : Arrays.asList(System.getenv("JAVA_HOME"), systemProperties.getProperty("java.home"))) {
+                Path binaryPath;
+                if (javaHome != null) {
+                    binaryPath = Paths.get(javaHome)
+                        .toAbsolutePath()
+                        .resolve("bin")
+                        .resolve(binaryName);
+
+                    if (Files.isExecutable(binaryPath)) {
+                        return binaryPath;
+                    }
+
                     // in case 'java.home' or JAVA_HOME are set to a JRE
                     // we try to use the one in the folder up, which is usually where the JDK is
                     binaryPath = Paths.get(javaHome)
@@ -156,10 +153,16 @@ static Path getJpsPath(Properties systemProperties) {
                         .resolve("..")
                         .resolve("bin")
                         .resolve(binaryName);
-                }
 
+                    if (Files.isExecutable(binaryPath)) {
+                        return binaryPath;
+                    }
+
+                }
             }
-            return binaryPath;
+
+            // fallback to the simple binary name
+            return binaryName;
         }
     }
 

From 504134bf88ed694cbe5b6711914afe3ac066b28e Mon Sep 17 00:00:00 2001
From: Sylvain Juge <sylvain.juge@elastic.co>
Date: Mon, 24 Aug 2020 10:02:12 +0200
Subject: [PATCH 4/5] make tests more robust

---
 .../co/elastic/apm/attach/JvmDiscoverer.java  | 48 +++++++-----
 .../co/elastic/apm/attach/RemoteAttacher.java |  2 +-
 .../elastic/apm/attach/JvmDiscovererTest.java | 76 +++++++++++++++++--
 3 files changed, 98 insertions(+), 28 deletions(-)

diff --git a/apm-agent-attach/src/main/java/co/elastic/apm/attach/JvmDiscoverer.java b/apm-agent-attach/src/main/java/co/elastic/apm/attach/JvmDiscoverer.java
index 39141bcbb..e72dce514 100644
--- a/apm-agent-attach/src/main/java/co/elastic/apm/attach/JvmDiscoverer.java
+++ b/apm-agent-attach/src/main/java/co/elastic/apm/attach/JvmDiscoverer.java
@@ -39,6 +39,7 @@
 import java.util.Collection;
 import java.util.HashSet;
 import java.util.List;
+import java.util.Map;
 import java.util.Properties;
 import java.util.Set;
 
@@ -118,14 +119,17 @@ public boolean isAvailable() {
         }
 
         private static Process runJps() throws IOException {
-            return new ProcessBuilder(JpsFinder.getJpsPath(System.getProperties()).toString(), "-lv").start();
+            return new ProcessBuilder(JpsFinder.getJpsPath().toString(), "-lv").start();
         }
 
     }
 
     class JpsFinder {
         // package protected for testing
-        static Path getJpsPath(Properties systemProperties) {
+        static List<Path> getJpsPaths(Properties systemProperties, Map<String,String> env) {
+
+            List<Path> list = new ArrayList<Path>();
+
             String os = systemProperties.getProperty("os.name");
             Path binaryName;
             if (os != null && os.startsWith("Windows")) {
@@ -134,35 +138,41 @@ static Path getJpsPath(Properties systemProperties) {
                 binaryName = Paths.get("jps");
             }
 
-            for (String javaHome : Arrays.asList(System.getenv("JAVA_HOME"), systemProperties.getProperty("java.home"))) {
-                Path binaryPath;
+
+            for (String javaHome : Arrays.asList(env.get("JAVA_HOME"), systemProperties.getProperty("java.home"))) {
                 if (javaHome != null) {
-                    binaryPath = Paths.get(javaHome)
-                        .toAbsolutePath()
+                    list.add(Paths.get(javaHome)
                         .resolve("bin")
-                        .resolve(binaryName);
-
-                    if (Files.isExecutable(binaryPath)) {
-                        return binaryPath;
-                    }
+                        .resolve(binaryName));
 
                     // in case 'java.home' or JAVA_HOME are set to a JRE
                     // we try to use the one in the folder up, which is usually where the JDK is
-                    binaryPath = Paths.get(javaHome)
-                        .toAbsolutePath()
+                    list.add(Paths.get(javaHome)
                         .resolve("..")
                         .resolve("bin")
-                        .resolve(binaryName);
-
-                    if (Files.isExecutable(binaryPath)) {
-                        return binaryPath;
-                    }
+                        .resolve(binaryName));
 
                 }
             }
 
             // fallback to the simple binary name
-            return binaryName;
+            list.add(binaryName);
+
+            return list;
+        }
+
+        static Path getJpsPath(Properties systemProperties, Map<String,String> env) {
+            List<Path> locations = getJpsPaths(systemProperties, env);
+            for (Path path : locations) {
+                if (Files.isExecutable(path)) {
+                    return path;
+                }
+            }
+            throw new IllegalStateException("unable to locate jps executable, searched locations : " + locations);
+        }
+
+        static Path getJpsPath() {
+            return getJpsPath(System.getProperties(), System.getenv());
         }
     }
 
diff --git a/apm-agent-attach/src/main/java/co/elastic/apm/attach/RemoteAttacher.java b/apm-agent-attach/src/main/java/co/elastic/apm/attach/RemoteAttacher.java
index 1a4baff5e..36c976f1e 100644
--- a/apm-agent-attach/src/main/java/co/elastic/apm/attach/RemoteAttacher.java
+++ b/apm-agent-attach/src/main/java/co/elastic/apm/attach/RemoteAttacher.java
@@ -60,7 +60,7 @@ public static void main(String[] args) throws Exception {
             arguments = Arguments.parse(args);
             if (!arguments.getIncludes().isEmpty() || !arguments.getExcludes().isEmpty()) {
                 if (!JvmDiscoverer.Jps.INSTANCE.isAvailable()) {
-                    String jpsPath = JvmDiscoverer.JpsFinder.getJpsPath(System.getProperties()).toString();
+                    String jpsPath = JvmDiscoverer.JpsFinder.getJpsPaths(System.getProperties(), System.getenv()).toString();
                     throw new IllegalStateException("Matching JVMs with --include or --exclude requires jps, unable to execute " + jpsPath);
                 }
             }
diff --git a/apm-agent-attach/src/test/java/co/elastic/apm/attach/JvmDiscovererTest.java b/apm-agent-attach/src/test/java/co/elastic/apm/attach/JvmDiscovererTest.java
index bdddcbcf5..4cf01e06b 100644
--- a/apm-agent-attach/src/test/java/co/elastic/apm/attach/JvmDiscovererTest.java
+++ b/apm-agent-attach/src/test/java/co/elastic/apm/attach/JvmDiscovererTest.java
@@ -26,13 +26,18 @@
 
 import org.junit.jupiter.api.Test;
 
-import java.io.File;
 import java.nio.file.Files;
 import java.nio.file.Path;
+import java.nio.file.Paths;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
 import java.util.Optional;
 import java.util.Properties;
 
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.jupiter.api.Assertions.assertThrows;
+
 
 class JvmDiscovererTest {
 
@@ -60,26 +65,81 @@ void jpsShouldIgnoreJps() throws Exception {
 
     @Test
     void getJpsPathNoJavaHome() {
+        checkExpectedJpsPaths(new Properties(), new HashMap<String, String>(), Paths.get("jps"));
+    }
+
+    @Test
+    void getJpsPathJavaHomeProperties() {
+        Properties sysProperties = new Properties();
+        Map<String,String> env = new HashMap<String,String>();
+
+        Path javaHomeProperties = Paths.get("java", "home");
+        sysProperties.put("java.home", javaHomeProperties.toString());
+
+        checkExpectedJpsPaths(sysProperties, env,
+            javaHomeProperties.resolve("bin").resolve("jps"),
+            javaHomeProperties.resolve("..").resolve("bin").resolve("jps"),
+            Paths.get("jps"));
+    }
+
+    @Test
+    void getJpsPathJavaHomeEnv() {
+        Properties sysProperties = new Properties();
+        Map<String,String> env = new HashMap<String,String>();
+
+        Path javaHomeEnv = Paths.get("usr", "local", "java");
+        env.put("JAVA_HOME", javaHomeEnv.toString());
+
+        checkExpectedJpsPaths(sysProperties, env,
+            javaHomeEnv.resolve("bin").resolve("jps"),
+            javaHomeEnv.resolve("..").resolve("bin").resolve("jps"),
+            Paths.get("jps"));
+    }
+
+    @Test
+    void getJpsPathJavaHomeEnvAndProperties() {
         Properties sysProperties = new Properties();
-        Path path = JvmDiscoverer.JpsFinder.getJpsPath(sysProperties);
-        assertThat(path).asString()
-            .describedAs("should use binary in path as fallback")
-            .isEqualTo("jps");
+        Map<String, String> env = new HashMap<String, String>();
+
+        Path javaHomeEnv = Paths.get("usr", "local", "java");
+        env.put("JAVA_HOME", javaHomeEnv.toString());
+
+        Path javaHomeProperties = Paths.get("java", "home");
+        sysProperties.put("java.home", javaHomeProperties.toString());
+
+        checkExpectedJpsPaths(sysProperties, env,
+            javaHomeEnv.resolve("bin").resolve("jps"),
+            javaHomeEnv.resolve("..").resolve("bin").resolve("jps"),
+            javaHomeProperties.resolve("bin").resolve("jps"),
+            javaHomeProperties.resolve("..").resolve("bin").resolve("jps"),
+            Paths.get("jps"));
     }
 
+
     @Test
     void getJpsPathWindows() {
         Properties sysProperties = new Properties();
         sysProperties.put("os.name", "Windows ME"); // the best one ever !
-        Path path = JvmDiscoverer.JpsFinder.getJpsPath(sysProperties);
-        assertThat(path).asString().isEqualTo("jps.exe");
+
+        checkExpectedJpsPaths(sysProperties, new HashMap<String,String>(), Paths.get("jps.exe"));
         // note: we can't really test both windows+java.home set as it relies on absolute path resolution
     }
 
+    @Test
+    void getJpsNotFound() {
+        assertThrows(IllegalStateException.class, () -> JvmDiscoverer.JpsFinder.getJpsPath(new Properties(), new HashMap<String, String>()));
+    }
+
     @Test
     void getJpsPathCurrentJvm() {
-        Path path = JvmDiscoverer.JpsFinder.getJpsPath(System.getProperties());
+        Path path = JvmDiscoverer.JpsFinder.getJpsPath(System.getProperties(), System.getenv());
         assertThat(Files.isExecutable(path)).isTrue();
     }
 
+    void checkExpectedJpsPaths(Properties sysProperties, Map<String, String> env, Path... expectedPaths) {
+        List<Path> paths = JvmDiscoverer.JpsFinder.getJpsPaths(sysProperties, env);
+        assertThat(paths)
+            .containsExactly(expectedPaths);
+    }
+
 }

From cdf9db14f5e451ecb2665295cafe057a4ec88f20 Mon Sep 17 00:00:00 2001
From: Sylvain Juge <sylvain.juge@elastic.co>
Date: Mon, 24 Aug 2020 10:14:38 +0200
Subject: [PATCH 5/5] sligthly better wording

---
 .../src/main/java/co/elastic/apm/attach/RemoteAttacher.java   | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/apm-agent-attach/src/main/java/co/elastic/apm/attach/RemoteAttacher.java b/apm-agent-attach/src/main/java/co/elastic/apm/attach/RemoteAttacher.java
index 36c976f1e..c6a8307e5 100644
--- a/apm-agent-attach/src/main/java/co/elastic/apm/attach/RemoteAttacher.java
+++ b/apm-agent-attach/src/main/java/co/elastic/apm/attach/RemoteAttacher.java
@@ -60,8 +60,8 @@ public static void main(String[] args) throws Exception {
             arguments = Arguments.parse(args);
             if (!arguments.getIncludes().isEmpty() || !arguments.getExcludes().isEmpty()) {
                 if (!JvmDiscoverer.Jps.INSTANCE.isAvailable()) {
-                    String jpsPath = JvmDiscoverer.JpsFinder.getJpsPaths(System.getProperties(), System.getenv()).toString();
-                    throw new IllegalStateException("Matching JVMs with --include or --exclude requires jps, unable to execute " + jpsPath);
+                    String locations = JvmDiscoverer.JpsFinder.getJpsPaths(System.getProperties(), System.getenv()).toString();
+                    throw new IllegalStateException("Matching JVMs with --include or --exclude requires jps, unable to find it in searched locations: " + locations);
                 }
             }
         } catch (IllegalArgumentException e) {
